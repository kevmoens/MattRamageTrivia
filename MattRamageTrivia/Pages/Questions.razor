@page "/questions"
@inject TriviaRepository repo
@inject IJSRuntime JSRuntime
@inject MattRamageTrivia.Models.QuestionExportImport.Import import

<h3>Questions</h3>

<div class="d-flex justify-content-start">
    <div class="pt-2 pe-2">
        <a href='/questions/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Question
        </a>
    </div>
    <div class="p-2">
        <button class="btn btn-info" @onclick="OnResetUsed">Reset Used</button>
    </div>
    <div class="p-2">
        <button class="btn btn-info" @onclick="OnExport">Export</button>
    </div>
    <div class="p-2">
        Import <InputFile class="btn btn-info" OnChange="OnImport">Import</InputFile>
    </div>
</div>
<div class="row">
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search Questions"
        @bind="SearchString" @bind:event="oninput" @onkeyup="FilterQuestion" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times">Reset</i>
                </button>
            </div>
        }
    </div>
</div>

<br />
@if (questionList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>Text</th>
                <th>Image</th>
                <th>Difficulty</th>
                <th>Used</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var quest in questionList)
            {
                <tr>
                    <td>@quest.Id</td>

                    <td>@quest.Text</td>
                    <td>
                        @if ((quest?.Image ?? Array.Empty<byte>()) != Array.Empty<byte>())
                        {
                            <img src="data:image;base64,@System.Convert.ToBase64String(quest?.Image ?? Array.Empty<byte>())" style="max-width:240px;max-height:240px" />
                        }
                    </td>
                    <td>@quest!.Difficulty</td>
                    <td>@quest!.Used 
                        @if (quest!.Used)
                        {
                            <button class="btn btn-outline-primary" @onclick="()=> OnUnused(quest!)" >Reset</button>

                        }
                    </td>

                    <td>
                        <a href='/questions/edit/@quest.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/questions/delete/@quest.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    protected List<Question>? questionList = null;
    protected List<Question> searchQuestionData = new();
    protected Question? question = new();
    protected string SearchString { get; set; } = string.Empty;
    protected override Task OnInitializedAsync()
    {
        questionList = repo.Questions.ToList();
        return base.OnInitializedAsync();
    }
    protected void FilterQuestion()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            questionList = repo.Questions
                .AsEnumerable()
                .Where(x => x.Text.Contains(SearchString, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }
        else
        {
            questionList = repo.Questions.ToList();
        }
    }
    protected void DeleteConfirm(int questionID)
    {
        question = questionList!.FirstOrDefault(x => x.Id == questionID);
    }
    void OnResetUsed()
    {
        foreach (var q in repo.Questions.ToList())
        {
            q.Used = false;
            repo.Questions.Update(q);
        }
        repo.SaveChanges();
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        questionList = repo.Questions.ToList();
    }
    async void OnExport()
    {
        // Generate a text file
        // serialize repo.Questions to XML text
        Type tyListQuestion = typeof(List<Question>);
        var xmlSerializer = new System.Xml.Serialization.XmlSerializer(tyListQuestion);
        using var stringWriter = new System.IO.StringWriter();
        var questions = repo.Questions.ToList();
        foreach (var question in questions)
        {
            question.ListOptions = repo.QuestionOptions.Where(o => o.QuestionId == question.Id).ToList();
        }
        xmlSerializer.Serialize(stringWriter, questions);
        string xmlText = stringWriter.ToString();
        byte[] file = System.Text.Encoding.UTF8.GetBytes(xmlText);
        await JSRuntime.InvokeVoidAsync("downloadFile", "Trivia.xml", "text/plain", file);
    }
    void OnUnused(Question question)
    {
        question.Used = false;
        repo.Questions.Update(question);
        repo.SaveChanges();
    }
    async Task OnImport(InputFileChangeEventArgs e)
    {
        await import.ImportFile(e);
        
        UpdateSearchAndList();
    }

    private void UpdateSearchAndList()
    {
        SearchString = string.Empty;
        questionList = repo.Questions.ToList();
        StateHasChanged();
    }


}