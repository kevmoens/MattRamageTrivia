@page "/questions"
@inject TriviaRepository repo

<h3>Questions</h3>

<div class="row">
    <div class="col-md-6">
        <a href='/questions/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Question
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search Questions"
        @bind="SearchString" @bind:event="oninput" @onkeyup="FilterQuestion" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (questionList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>Text</th>
                <th>Image</th>
                <th>Difficulty</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var quest in questionList)
            {
                <tr>
                    <td>@quest.Id</td>
                    <td>@quest.Text</td>
                    <td>
                        <img src="data:image;base64,@System.Convert.ToBase64String(quest?.Image ?? new byte[] {})" style="max-width:240px;max-height:240px" />
                    </td>
                    <td>@quest!.Difficulty</td>

                    <td>
                        <a href='/questions/edit/@quest.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/questions/delete/@quest.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    protected List<Question>? questionList = null;
    protected List<Question> searchQuestionData = new();
    protected Question? question = new();
    protected string SearchString { get; set; } = string.Empty;
    protected override Task OnInitializedAsync()
    {
        questionList = repo.Questions.ToList();
        return base.OnInitializedAsync();
    }
    protected void FilterQuestion()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            questionList = searchQuestionData
                .Where(x => x.Text.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            questionList = searchQuestionData;
        }
    }
    protected void DeleteConfirm(int questionID)
    {
        question = questionList!.FirstOrDefault(x => x.Id == questionID);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        questionList = searchQuestionData;
    }
}