@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Matt Ramage Trivia</PageTitle>


<!-- how can I create a randomizer circular spinner in HTML/css-->
<style>
    .spinner-container {
        transform: @spinnerContainerTransform;
    }
</style>


<div class="d-flex flex-row flex-wrap">

    <div class="spinner-area">
        <button id="spin" @onclick="btnSpin_Click">Spin</button>
        <span class="arrowdown"></span>
        <div class="spinner-container">
            <div class="one">250</div>
            <div class="two">100</div>
            <div class="three">500</div>
            <div class="four">50</div>
            <div class="five">300</div>
            <div class="six">150</div>
            <div class="seven">400</div>
            <div class="eight">350</div>
        </div>
    </div>

    <div class="d-flex flex-column flex-fill mx-5">
        <div class="d-flex flex-column flex-wrap flex-fill justify-content-around">
            @foreach (var contestant in _contestants)
            {
                <div class="d-flex flex-grow-1 flex-fill align-items-center rcorner m-3" @onclick="() => OnPlayerClick(contestant.Id)">

                    @if (contestant.Id == CurrentContestantTurn)
                    {
                        <div class="arrowright"></div>
                    }
                    <div class="flex-fill text-center">
                        <h1><b>@contestant.Name</b></h1>
                        <br />
                        <h1><b>@contestant.Score</b></h1>
                    </div>
                </div>

            }
        </div>
    </div>
</div>

<div>

    <br />
    <div class="hover-option-container">
        <div class="hover-option-item ">
            <HoverButton style="width:100%" />
        </div>
        <div class="hover-option-item ">
            <HoverButton style="width:100%" />
        </div>

    </div>
    <div class="hover-option-container">
        <div class="hover-option-item ">
            <HoverButton style="width:100%" />
        </div>
        <div class="hover-option-item ">
            <HoverButton style="width:100%" />
        </div>
    </div>
</div>

@code {
    private List<Contestant> _contestants = new();
    private Guid CurrentContestantTurn = Guid.Empty;
    private List<int> numbers = new();
    private double deg = 0;
    private int rotation = 0;
    private string? spinnerContainerTransform => $"rotate({rotation}deg)";
    void btnSpin_Click()
    {
        var rnd = new Random();
        int change = rnd.Next(900, 1260);
        var diff = System.Math.IEEERemainder(change, 45.0);
        change -= (int)diff;
        rotation += change;
        deg = System.Math.IEEERemainder(rotation, 360.0);
        numbers.Add(GetNumber(deg));
        StateHasChanged();
    }
    int GetNumber(double deg)
    {
        switch (deg)
        {
            case 0:
                return 1;
            case 45:
            case -315:
                return 8;
            case 90:
            case -270:
                return 7;
            case 135:
            case -225:
                return 6;
            case 180:
            case -180:
                return 5;
            case 225:
            case -135:
                return 4;
            case 270:
            case -90:
                return 3;
            case 315:
            case -45:
                return 2;
            default:
                throw new ArgumentOutOfRangeException("degrees");
        }
    }
    int GetValue(int position)
    {
        switch (position)
        {
            case 1:
                return 250;
            case 2:
                return 100;
            case 3:
                return 500;
            case 4:
                return 50;
            case 5:
                return 300;
            case 6:
                return 150;
            case 7:
                return 400;
            case 8:
                return 350;
            default:
                throw new ArgumentOutOfRangeException("point value");

        }
    }
    void OnPlayerClick(Guid id)
    {
        CurrentContestantTurn = id;
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var currentContestantTurn = await localStorage.GetItemAsync<string>("CurrentContestantTurn");
        Guid.TryParse(currentContestantTurn, out CurrentContestantTurn);

        var contestants = await localStorage.GetItemAsync<string>("Contestants");
        if (string.IsNullOrWhiteSpace(contestants))
        {
            return;
        }
        _contestants = System.Text.Json.JsonSerializer.Deserialize<List<Contestant>>(contestants) ?? new List<Contestant>();
        StateHasChanged();
    }
}