@page "/round/{playerId}/{amount:int}"
@inject TriviaRepository repo
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navMan

<PageTitle>Matt Ramage Trivia</PageTitle>
<div style="margin-left: 3rem;">
@*
<h2>@contestant?.Name</h2>
<h4>Question Points: @amount</h4>*@
<div>
    @if (question?.Image?.Length > 0)
    {
        <div class="question-image-container">
            <div>
                <h3 style="max-width: 80%; margin-left: 30px;">@question?.Text</h3>
            </div>
            <div>
                <img src="data:image;base64,@System.Convert.ToBase64String(question?.Image ?? new byte[] {})" style="max-width:50vw;max-height:25vh" />
            </div>
        </div>
    }
    else
    {
        <h3 style="max-width: 80%; margin-left: 30px;">@question?.Text</h3>
    }
    @foreach (var row in rows)
    {
        <div class="hover-option-container">
            <div class="hover-option-item" @onclick="()=> OnSelectedChoice(options[row * 2])">
                <HoverButton style="width:100%">
                    @if (options[(row * 2)].Image?.Length > 0)
                    {
                        <img src="data:image;base64,@System.Convert.ToBase64String(options[(row * 2)].Image ?? new byte[] {})" style="max-width:50vw;max-height:25vh" />
                    }
                    else
                    {
                        @options[(row * 2)].Text
                    }
                </HoverButton>
            </div>
            @if (options.Count > row * 2 + 1)
            {
                <div class="hover-option-item" @onclick="()=> OnSelectedChoice(options[row * 2 + 1])">
                    <HoverButton style="width:100%">
                        @if (options[(row * 2) + 1].Image?.Length > 0)
                        {
                            <img src="data:image;base64,@System.Convert.ToBase64String(options[(row * 2) + 1].Image ?? new byte[] {})" style="max-width:50vw;max-height:25vh" />
                        }
                        else
                        {
                            @options[(row * 2) + 1].Text
                        }
                    </HoverButton>
                </div>
            }
        </div>
    }
</div>

</div>
@code {
    [Parameter]
    public string playerId { get; set; } = string.Empty;
    [Parameter]
    public int amount { get; set; } = 0;

    private Hub hub = Hub.Default;
    private List<int> rows = new();
    private Question? question;
    private List<QuestionOption> options = new();
    List<Contestant> contestantsList = new();
    Contestant? contestant;
    private int _currentRound = 1;
    public int CurrentRound { get { return _currentRound; } set { _currentRound = value; } }
    private string _media = "Image";
    public string Media { get { return _media; } set { _media = value; } }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        var contestants = await localStorage.GetItemAsync<string>("Contestants");
        if (string.IsNullOrWhiteSpace(contestants))
        {
            return;
        }
        contestantsList = System.Text.Json.JsonSerializer.Deserialize<List<Contestant>>(contestants) ?? new List<Contestant>();
        contestant = contestantsList.Where(c => c.Id == Guid.Parse(playerId)).FirstOrDefault();
        if (contestant == null)
        {
            //Show Error
            return;
        }

        var curRound = await localStorage.GetItemAsync<string>("CurrentRound");

        if (int.TryParse(curRound, out int currentRound))
        {
            _currentRound = currentRound;
        }

        _media = await localStorage.GetItemAsync<string>("ResultsMedia");

        await hub.PublishAsync<TopRowNameInfo>(new TopRowNameInfo() { Name = contestant?.Name, Amount = amount.ToString(), Show = true, Round = _currentRound });
        Random rnd = new();
        List<int> questionIds;
        questionIds = GetQuestions();
        int questionIdx = rnd.Next(0, questionIds.Count);
        int questionId = questionIds[questionIdx];
        question = repo.Questions.Where(q => q.Id == questionId).First();
        options = repo.QuestionOptions.Where(o => o.QuestionId == questionId).ToList();
        rows.Clear();
        for (int i = 0; i < (int)(options!.Count / 2); i++)
        {
            rows.Add(i);
        }
        StateHasChanged();
    }
    private List<int> GetQuestions()
    {
        List<int> questionIds;
        //Try to get a question based on weight
        questionIds = repo.Questions.Where(q => q.Used == false 
                                        && q.AskedThisRound == false
                                        && (amount >= 400 && q.Difficulty >= 7 || amount < 150 && q.Difficulty <= 3))
                  .Select(q => q.Id)
                  .ToList();
        if (questionIds == null || questionIds.Count == 0)
        {
            questionIds = repo.Questions.Where(q => q.Used == false
                                                    && q.AskedThisRound == false
                                                    && (amount >= 250 && q.Difficulty > 5 || amount < 250 && q.Difficulty <= 5))
                              .Select(q => q.Id)
                              .ToList();
        }
        if (questionIds == null || questionIds.Count == 0)
        {
            questionIds = repo.Questions.Where(q => q.Used == false
                                        && q.AskedThisRound == false)
                              .Select(q => q.Id)
                              .ToList();
        }

        if (questionIds == null || questionIds.Count == 0)
        {
            questionIds = repo.Questions.Where(q => q.Used == false
                                                && (amount >= 400 && q.Difficulty >= 7 || amount < 150 && q.Difficulty <= 3))
                          .Select(q => q.Id)
                          .ToList();
        }

        if (questionIds == null || questionIds.Count == 0)
        {
            questionIds = repo.Questions.Where(q => q.Used == false
                                                    && (amount >= 250 && q.Difficulty > 5 || amount < 250 && q.Difficulty <= 5))
                              .Select(q => q.Id)
                              .ToList();
        }
        if (questionIds == null || questionIds.Count == 0)
        {
            questionIds = repo.Questions.Where(q => q.Used == false)
                              .Select(q => q.Id)
                              .ToList();
        }

        return questionIds;
    }
    async void OnSelectedChoice(QuestionOption option)
    {

        hub.Publish<TopRowNameInfo>(new TopRowNameInfo() { Name = "", Amount = "", Show = false });
        Random random = new Random();
        string result = GetExistFileName("Wrong");
        if (option.IsAnswer)
        {
            question!.AskedThisRound = true;
            question!.Used = true;
            repo.Questions.Update(question!);
            repo.SaveChanges();

            contestant!.Score += amount;
            result = GetExistFileName("Correct");
            await localStorage.SetItemAsync("Contestants", System.Text.Json.JsonSerializer.Serialize(contestantsList));
        } else
        {
            question!.AskedThisRound = true;
            repo.Questions.Update(question!);
            repo.SaveChanges();
        }
        //Find Next Player
        int idx = contestantsList.IndexOf(contestant!);
        if (idx == contestantsList.Count - 1)
        {
            await localStorage.SetItemAsync("CurrentContestantTurn", contestantsList[0].Id.ToString());
            CurrentRound++;
            await localStorage.SetItemAsync("CurrentRound", CurrentRound.ToString());
        }
        else
        {
            await localStorage.SetItemAsync("CurrentContestantTurn", contestantsList[idx + 1].Id.ToString());
        }


        navMan.NavigateTo($"/{Media}/{result}");
    }
    private string GetExistFileName(string name)
    {
        string search = $"{name}*.{GetMediaExtension()}";
        var basePath = Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot");
        var files = Directory.GetFiles(basePath, search);
        if (files.Length == 0)
        {
            return $"{name}.{GetMediaExtension()}";
        }
        int i = 0;
        string result = string.Empty;
        while (i < CurrentRound)
        {
            for (int j = 0; j < files.Length; j++)
            {
                result = files[j];
                i++;
                if (i >= CurrentRound)
                {
                    break;
                }
            }
        }
        return result.Substring(basePath.Length + 1);
    }
    private string GetMediaExtension()
    {
        if (Media == "image")
        {
            return "jpg";
        }
        return "mp4";
    }
}
